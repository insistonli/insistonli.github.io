<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>李金朋Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-05-18T07:23:57.927Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>李金朋</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>原型和原型链</title>
    <link href="http://yoursite.com/2020/05/18/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>http://yoursite.com/2020/05/18/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/</id>
    <published>2020-05-18T07:19:37.000Z</published>
    <updated>2020-05-18T07:23:57.927Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h2><ul><li>所有对象都是通过<code>new 函数</code>创建</li><li>所有的函数也是对象<ul><li>函数中可以有属性</li></ul></li><li>所有对象都是引用类型</li></ul><h2 id="原型-prototype"><a href="#原型-prototype" class="headerlink" title="原型 prototype"></a>原型 prototype</h2><p>所有函数都有一个属性：prototype，称之为函数原型</p><p>默认情况下，prototype是一个普通的Object对象</p><p>默认情况下，prototype中有一个属性，constructor，它也是一个对象，它指向构造函数本身。</p><h2 id="隐式原型-proto"><a href="#隐式原型-proto" class="headerlink" title="隐式原型 proto"></a>隐式原型 <strong>proto</strong></h2><p>所有的对象都有一个属性：<code>__proto__</code>，称之为隐式原型</p><p>默认情况下，隐式原型指向创建该对象的函数的原型。</p><p>当访问一个对象的成员时：</p><ol><li><p>看该对象自身是否拥有该成员，如果有直接使用</p></li><li><p>在原型链中依次查找是否拥有该成员，如果有直接使用</p></li></ol><p>猴子补丁：在函数原型中加入成员，以增强起对象的功能，猴子补丁会导致原型污染，使用需谨慎。</p><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>特殊点：</p><ol><li>Function的<strong>proto</strong>指向自身的prototype</li><li>Object的prototype的<strong>proto</strong>指向null</li></ol><h2 id="链条的全貌"><a href="#链条的全貌" class="headerlink" title="链条的全貌"></a>链条的全貌</h2><h2 id="原型和原型链-1"><a href="#原型和原型链-1" class="headerlink" title="原型和原型链"></a>原型和原型链</h2><ul><li><p>所有对象都是通过<code>new 函数</code>创建</p></li><li><p>所有的函数也是对象</p><ul><li>函数中可以有属性</li></ul></li><li><p>所有对象都是引用类型</p></li></ul><h2 id="原型-prototype-1"><a href="#原型-prototype-1" class="headerlink" title="原型 prototype"></a>原型 prototype</h2><p>所有函数都有一个属性：prototype，称之为函数原型</p><p>默认情况下，prototype是一个普通的Object对象</p><p>默认情况下，prototype中有一个属性，constructor，它也是一个对象，它指向构造函数本身。</p><h2 id="隐式原型-proto-1"><a href="#隐式原型-proto-1" class="headerlink" title="隐式原型 proto"></a>隐式原型 <strong>proto</strong></h2><p>所有的对象都有一个属性：<code>__proto__</code>，称之为隐式原型</p><p>默认情况下，隐式原型指向创建该对象的函数的原型。</p><p>当访问一个对象的成员时：</p><ol><li><p>看该对象自身是否拥有该成员，如果有直接使用</p></li><li><p>在原型链中依次查找是否拥有该成员，如果有直接使用</p></li></ol><p>猴子补丁：在函数原型中加入成员，以增强起对象的功能，猴子补丁会导致原型污染，使用需谨慎。</p><h2 id="原型链-1"><a href="#原型链-1" class="headerlink" title="原型链"></a>原型链</h2><p>特殊点：</p><ol><li>Function的<strong>proto</strong>指向自身的prototype</li><li>Object的prototype的<strong>proto</strong>指向null</li></ol><h2 id="链条的全貌-1"><a href="#链条的全貌-1" class="headerlink" title="链条的全貌"></a>链条的全貌</h2><p><img src="https://note.youdao.com/yws/api/personal/file/WEB194060970a726f4950296872423001af?method=download&shareKey=51be5efc6fe0a0fe1205fd4d58680393" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;原型和原型链&quot;&gt;&lt;a href=&quot;#原型和原型链&quot; class=&quot;headerlink&quot; title=&quot;原型和原型链&quot;&gt;&lt;/a&gt;原型和原型链&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;所有对象都是通过&lt;code&gt;new 函数&lt;/code&gt;创建&lt;/li&gt;
&lt;li&gt;所有的函数也是对象
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vue</title>
    <link href="http://yoursite.com/2020/03/23/Vue/"/>
    <id>http://yoursite.com/2020/03/23/Vue/</id>
    <published>2020-03-23T04:43:10.792Z</published>
    <updated>2020-03-18T15:24:40.159Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-声明式编程"><a href="#Vue-声明式编程" class="headerlink" title="Vue 声明式编程"></a>Vue 声明式编程</h1><h2 id="vue指令-基本语法"><a href="#vue指令-基本语法" class="headerlink" title="vue指令/基本语法"></a>vue指令/基本语法</h2><a id="more"></a><h3 id="v-bind-绑定属性"><a href="#v-bind-绑定属性" class="headerlink" title="v-bind 绑定属性"></a>v-bind 绑定属性</h3><p>简写 在属性前加 :</p><p>绑定多个class</p><ul><li>v-bind动态绑定</li></ul><ol><li><p>动态绑定class(对象语法，数组语法)</p><p>对象语法</p><p>:class = {class : ture/false}</p><p>是否存在在data里用变量控制</p><p>用数组[]</p><p>:class=”[class1, class2]”</p><p>value可以为ture或者flase 控制class1 是否添加</p><p>:class=”[{class1: value}, class2]”<br>数据用参数的形式传入dom元素中去</p></li><li><p>绑定style</p><p>添加样式可以用对象的形式</p><p>:style={width: xxx,background: yy}</p><p>绑定多个style时用对象或数组</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">:style&#x3D;&quot;[&#123;width: imgWidth&#125;, imgStyle]&quot;</span><br><span class="line">:style &#x3D; &quot;getStyles()&quot;</span><br><span class="line">const vm &#x3D; new Vue(&#123;</span><br><span class="line"></span><br><span class="line">    el : &#39;#app&#39;</span><br><span class="line"></span><br><span class="line">    data: &#123;</span><br><span class="line">        imgWidth: &#39;200px&#39;,</span><br><span class="line">        imgStyle: &#123;</span><br><span class="line">            border: &#39;10px solid red&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">    getStyles: function()&#123;</span><br><span class="line">    return &#123;width: imgWidth,backgroundColor: red&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>​     </p><h3 id="v-on指令-实现事件监听"><a href="#v-on指令-实现事件监听" class="headerlink" title="v-on指令 实现事件监听"></a>v-on指令 实现事件监听</h3><h4 id="一、简写-click-“handleClick”-点击事件"><a href="#一、简写-click-“handleClick”-点击事件" class="headerlink" title="一、简写 @click = “handleClick” 点击事件"></a>一、简写 @click = “handleClick” 点击事件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click = <span class="string">"handleClick"</span>&gt;&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button @click = "btnClick(abc,$event)"&gt;&lt;/</span>button&gt;</span><br><span class="line">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line"></span><br><span class="line">        el: <span class="string">'#app'</span>,</span><br><span class="line"></span><br><span class="line">        data: &#123;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleClick()&#123;</span><br><span class="line">            &#125;,</span><br><span class="line">            btnClick(<span class="string">'aa'</span>,event)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><ul><li><p>当通过methods中定义方法，以供@click调用时，</p><ul><li>如果该方法不需要额外参数，那么方法后的()可以不添加</li><li>如果方法中本身有一个参数，那么会默认将原生事件event参数传递进去</li></ul></li><li><p>如果需要同时传入某个参数，同时需要event时，可以通过$event传入事件 btnClick(abc,$event)</p></li></ul><h4 id="二、v-on修饰符"><a href="#二、v-on修饰符" class="headerlink" title="二、v-on修饰符"></a>二、v-on修饰符</h4><ul><li>.stop修饰符可以做到阻止冒泡的作用</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"divClick"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btnClick"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">//这里会有事件冒泡发生 点击按钮，div上也会有反应</span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"divClick"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">"btnClick"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>.prevent可以阻止默认事件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;baidu&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot; @click.prevent &#x3D; &quot;submitClick&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><ul><li>.{keyCode | keyAlias} - 只当事件是从特定键触发时才触发回调</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;监听按下回车抬起时动作</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; @keyup.enter &#x3D; &quot;keyup&quot;&gt;</span><br></pre></td></tr></table></figure><ul><li>.native - 监听组件根元素的原生事件</li><li>.once - 只触发一次回调</li></ul><h3 id="v-if指令-实现显示和隐藏-v-show"><a href="#v-if指令-实现显示和隐藏-v-show" class="headerlink" title="v-if指令 实现显示和隐藏/ v-show"></a>v-if指令 实现显示和隐藏/ v-show</h3><p><strong>1. v-if 和 v-else if等</strong>(操作DOM)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;用于判断决定是否渲染，布尔值可以用变量控制</span><br><span class="line">&lt;template&gt;</span><br><span class="line">      &lt;div v-if &#x3D; &quot;布尔值&quot;&gt;&#123;&#123;  &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">      &lt;div v-else if &#x3D; &quot;布尔值&quot;&gt;&#123;&#123;  &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">      &lt;div v-else&gt;&#123;&#123;  &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;id&quot;&gt;</span><br><span class="line">      &lt;span v-if &#x3D; &quot;isUser&quot;&gt;</span><br><span class="line">        &lt;label for&#x3D;&quot;username&quot;&gt;用户账号&lt;&#x2F;label&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;username&quot; placeholder&#x3D;&quot;用户名登录&quot;&gt;</span><br><span class="line">      &lt;&#x2F;span&gt;</span><br><span class="line">      &lt;span v-else&gt;</span><br><span class="line">        &lt;label for&#x3D;&quot;emaii&quot;&gt;用户邮箱&lt;&#x2F;label&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;email&quot; placeholder&#x3D;&quot;用户邮箱&quot;&gt;</span><br><span class="line">      &lt;&#x2F;span&gt;</span><br><span class="line">      &lt;button @click &#x3D; &quot;isUser &#x3D; !isUser&quot;&gt;切换&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;.&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    const vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#id&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">          isUser: true</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">  </span><br><span class="line">  &#x2F;&#x2F;解决</span><br><span class="line">  &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;username&quot; placeholder&#x3D;&quot;用户名登录&quot; key&#x3D;&quot;username&quot;&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;email&quot; placeholder&#x3D;&quot;用户邮箱&quot; key&#x3D;&quot;email&quot;&gt;</span><br></pre></td></tr></table></figure><p>小问题：**</p><ul><li>如果我们在有输入内容的情况下，切换了类型，我们会发现文字依然显示之前输入的内容</li></ul><p>因为Vue在进行DOM渲染时，出于性能的考虑，会尽可能的复用已经存在的元素，而不是重新创建新的元素。先会有一个虚拟DOM。</p><p>解决：可以给对应的input添加key，并且要保证key的不同</p><p><strong>2. v-show</strong>(操作样式)</p><p>也是决定dom要不要显示出来，其实是改变元素的行内样式</p><p>当显示隐藏切片很频繁时，用v-show；一次切换用v-if</p><h3 id="v-for指令-循环遍历"><a href="#v-for指令-循环遍历" class="headerlink" title="v-for指令 循环遍历"></a>v-for指令 循环遍历</h3><ol><li><p>遍历数组</p><p><img src="C:%5CUsers%5C10095%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1569498786952.png" alt="遍历数组"></p></li><li><p>遍历对象</p><img src="C:\Users\10095\AppData\Roaming\Typora\typora-user-images\1569498962816.png" alt="1569498962816"  /></li></ol><p><strong>v-for绑定key</strong></p><p><img src="C:%5CUsers%5C10095%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1569499731672.png" alt="1569499731672"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;id&quot;&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for &#x3D; &quot;item in letters&quot; :key &#x3D; &quot;item&quot;&gt;&#123;&#123; item &#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;.&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    const vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#id&#39;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        letters: [&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;D&#39;,&#39;E&#39;]</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#x2F;&#x2F;插入F vm.letters.splice(2,0,&#39;F&#39;);</span><br><span class="line">&#x2F;&#x2F;splice可以删除，插入，替换元素</span><br></pre></td></tr></table></figure><ul><li>数组常用的方法 都能做到响应式，但是通过索引直接改变不行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;小demo</span><br><span class="line">&lt;&#x2F;script&gt; --&gt;</span><br><span class="line">  &lt;!-- 点击列表中的哪一项，那么该项的文字变成红色 --&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;id&quot;&gt;</span><br><span class="line">    &lt;template&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li v-for&#x3D;&quot;(item,key) in movies&quot; </span><br><span class="line">        :class&#x3D;&quot;&#123;red:currentIndex &#x3D;&#x3D;&#x3D; key&#125;&quot; </span><br><span class="line">        @click&#x3D;&quot;change(key)&quot;&gt;&#123;&#123; item &#125;&#125;--&#123;&#123;key&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">        </span><br><span class="line">      &lt;&#x2F;ul&gt;</span><br><span class="line">    &lt;&#x2F;template&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;.&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    const vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#id&#39;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        movies: [&#39;花王&#39;, &#39;2&#39;, &#39;3&#39;],</span><br><span class="line">        currentIndex: 0</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        change(key)&#123;</span><br><span class="line">          this.currentIndex &#x3D; key;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="v-model-双向绑定"><a href="#v-model-双向绑定" class="headerlink" title="v-model 双向绑定"></a>v-model 双向绑定</h3><ul><li>原理</li></ul><p>v-bind绑定input value值，使value值可以由data控制，翻过来监听input事件，监听此时输入的数据，再将message值实时的等于数据，用event对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- v-model原理 --&gt;</span><br><span class="line"> &lt;div id&#x3D;&quot;id&quot;&gt;</span><br><span class="line">   &lt;!-- input事件用于监听用户输入 --&gt;</span><br><span class="line">   &lt;!-- &lt;input type&#x3D;&quot;text&quot; :value &#x3D; &quot;message&quot; @input&#x3D;&quot;valueChange&quot;&gt;  --&gt;</span><br><span class="line">   &lt;input type&#x3D;&quot;text&quot; :value &#x3D; &quot;message&quot; @input&#x3D;&quot;message &#x3D;    $event.target.value&quot;&gt; </span><br><span class="line">   &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line"> &lt;&#x2F;div&gt;</span><br><span class="line"> &lt;script src&#x3D;&quot;..&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"> &lt;script&gt;</span><br><span class="line">   const vm &#x3D; new Vue(&#123;</span><br><span class="line">     el: &#39;#id&#39;,</span><br><span class="line">     data: &#123;</span><br><span class="line">       message: &#39;你好啊&#39;</span><br><span class="line">     &#125;,</span><br><span class="line">     methods: &#123;</span><br><span class="line">       valueChange(event)&#123;</span><br><span class="line">         this.message &#x3D; event.target.value;</span><br><span class="line">       &#125; </span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>当界面改变时，数据也会发生改变</p><ol><li>绑定input元素</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;id&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model &#x3D; &quot;message&quot;&gt; </span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;.&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    const vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#id&#39;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        message: &#39;你好啊&#39;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>v-model: radio</li></ol><ul><li>当存在多个单选框时，可以用v-model绑定</li></ul><ol start="3"><li>v-model: checkbox</li></ol><ul><li><p>复选框分为两种情况：单个勾选框和多个勾选框</p><ul><li>单选框通过false和ture可控制</li><li>多选框通过数组【】返回值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 1. checkbox单选框 --&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;id&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;label for&#x3D;&quot;agree&quot;&gt;</span><br><span class="line">      &lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;agree&quot; v-model&#x3D;&quot;isAgree&quot;&gt;同意协议</span><br><span class="line">    &lt;&#x2F;label&gt;</span><br><span class="line">    &lt;h2&gt;您选择的是: &#123;&#123;isAgree&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;button :disabled&#x3D;&quot;!isAgree&quot;&gt;下一步&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!-- 2. checkbox多选框 --&gt;</span><br><span class="line">    &lt;label for&#x3D;&quot;&quot;&gt;</span><br><span class="line">      &lt;input type&#x3D;&quot;checkbox&quot; value&#x3D;&quot;篮球 &quot; v-model&#x3D;&quot;hobbies&quot;&gt;篮球</span><br><span class="line">      &lt;input type&#x3D;&quot;checkbox&quot; value&#x3D;&quot;足球&quot; v-model&#x3D;&quot;hobbies&quot;&gt;足球</span><br><span class="line">      &lt;input type&#x3D;&quot;checkbox&quot; value&#x3D;&quot;排球 &quot; v-model&#x3D;&quot;hobbies&quot;&gt;排球</span><br><span class="line">    &lt;&#x2F;label&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script src&#x3D;&quot;..&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    const vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#id&#39;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        isAgree: false,</span><br><span class="line">        hobbies: []</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>多选框的值放入数组 可以传给其他</p></li></ul><ol start="4"><li>v-model:select（比较少见了）</li></ol><p>分为单选和多选两种情况</p><ul><li>单选 只能选中一个值<ul><li>v-model绑定的是一个值</li><li>当我们选中option中的一个时，会将它对应的value赋值到mySlect中</li></ul></li><li>多选：可以选中多个值<ul><li>v-model绑定的是一个数组，当选中多个值时，就会将选中的option对应的value添加到数组mySelect中</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;id&quot;&gt;</span><br><span class="line">    &lt;!-- 1. 选择一个 --&gt;</span><br><span class="line">    &lt;select name&#x3D;&quot;abc&quot; id&#x3D;&quot;&quot; v-model&#x3D;&quot;fruit&quot;&gt;</span><br><span class="line">      &lt;option value&#x3D;&quot;苹果&quot;&gt;苹果&lt;&#x2F;option&gt;</span><br><span class="line">      &lt;option value&#x3D;&quot;香蕉&quot;&gt;香蕉&lt;&#x2F;option&gt;</span><br><span class="line">      &lt;option value&#x3D;&quot;橘子&quot;&gt;橘子&lt;&#x2F;option&gt;</span><br><span class="line">      &lt;option value&#x3D;&quot;葡萄&quot;&gt;葡萄&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line">    &lt;h2&gt;选择&#123;&#123; fruit &#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 2. 选择多个 --&gt;</span><br><span class="line">    &lt;select name&#x3D;&quot;abc&quot; id&#x3D;&quot;&quot; v-model&#x3D;&quot;fruits&quot; multiple&gt;</span><br><span class="line">      &lt;option value&#x3D;&quot;苹果&quot;&gt;苹果&lt;&#x2F;option&gt;</span><br><span class="line">      &lt;option value&#x3D;&quot;香蕉&quot;&gt;香蕉&lt;&#x2F;option&gt;</span><br><span class="line">      &lt;option value&#x3D;&quot;橘子&quot;&gt;橘子&lt;&#x2F;option&gt;</span><br><span class="line">      &lt;option value&#x3D;&quot;葡萄&quot;&gt;葡萄&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line">    &lt;h2&gt;选择&#123;&#123; fruits &#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script src&#x3D;&quot;..&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    const vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#id&#39;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        isAgree: false,</span><br><span class="line">        hobbies: [],</span><br><span class="line">        fruit: &#39;香蕉&#39;,</span><br><span class="line">        fruits: []</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><img src="C:%5CUsers%5C10095%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1570610730653.png" alt="1570610730653"></p><p>通过值绑定：利用v-bind动态绑定input中的value值，下面是input多选框动态绑定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 通过值绑定 v-bind在input中的应用--&gt;</span><br><span class="line"> &lt;label v-for&#x3D;&quot;item in originHobbies &quot; :for&#x3D;&quot;item&quot;&gt;</span><br><span class="line">   &lt;input type&#x3D;&quot;checkbox&quot; :value&#x3D;&quot;item&quot; :id&#x3D;&quot;item&quot; v-model&#x3D;&quot;hobbies&quot;&gt;&#123;&#123; item &#125;&#125;</span><br><span class="line"> &lt;&#x2F;label&gt;</span><br><span class="line"> </span><br><span class="line"> --------------------------------</span><br><span class="line"> data: &#123;</span><br><span class="line">       isAgree: false,</span><br><span class="line">       hobbies: [],</span><br><span class="line">       fruit: &#39;香蕉&#39;,</span><br><span class="line">       fruits: [],</span><br><span class="line">       originHobbies: [&#39;篮球&#39; , &#39;足球&#39; , &#39;排球&#39;]</span><br><span class="line">     &#125;,</span><br></pre></td></tr></table></figure><p><strong>修饰符</strong></p><p><img src="C:%5CUsers%5C10095%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1570615095035.png" alt="1570615095035"></p><p>v-model.lazy=””….</p><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><ul><li>计算属性的本质</li></ul><p>fullname：{set(),get()}</p><ul><li><p>某些情况，我们需要对数据进行一些转化后再显示，或者需要将多个数据结合起来显示，例如一起联合，我们可以将它换成计算属性，计算属性是卸载实例的computed选项中的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const app &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#id&#39;,</span><br><span class="line">data: &#123;</span><br><span class="line">firstName: &#39;lebron&#39;,</span><br><span class="line">lastName: &#39;james&#39;</span><br><span class="line">&#125;,</span><br><span class="line">&#x2F;&#x2F;computed: 计算属性()</span><br><span class="line">computed: &#123;</span><br><span class="line">fullName: function()&#123;</span><br><span class="line">return this.firstName + &#39; &#39; + this.lastName</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">const app &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#id&#39;,</span><br><span class="line">data: &#123;</span><br><span class="line">books: [</span><br><span class="line">&#123;id: 110, name: &#39;数学&#39;, price: 119&#125;,</span><br><span class="line">&#123;id: 111, name: &#39;代码大全&#39;, price: 105&#125;,</span><br><span class="line">&#123;id: 112, name: &#39;深入理解计算机原理&#39;, price: 98&#125;,</span><br><span class="line">&#123;id: 113, name: &#39;语文&#39;, price: 89&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">&#x2F;&#x2F;computed: 计算属性()</span><br><span class="line">computed: &#123;</span><br><span class="line">&#x2F;&#x2F; filter&#x2F;map&#x2F;reduce</span><br><span class="line">totalPrice: funtion ()&#123;</span><br><span class="line">let result &#x3D; 0;</span><br><span class="line">for (let i &#x3D; 0; i &lt; this.books.length; i++)&#123;</span><br><span class="line">result +&#x3D; this.books[i].price</span><br><span class="line">&#125;</span><br><span class="line">return result;</span><br><span class="line"></span><br><span class="line">&lt;!--for (let i in this.books)&#123;</span><br><span class="line">this.books[i]</span><br><span class="line">&#125;</span><br><span class="line">for (let book of this.books)&#123;</span><br><span class="line"></span><br><span class="line">&#125;--&gt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><ul><li>每个计算属性都包括一个getter和一个setter</li></ul><p>methods和computed看起来都可以实现我们的功能，计算属性辉进行缓存，如果多次使用时，计算属性只会调用一次</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 多次执行的时候computed只会调用一次，计算属性有缓存 --&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;id&quot;&gt;</span><br><span class="line">    &lt;template&gt;</span><br><span class="line">      &lt;!-- 通过methods --&gt;</span><br><span class="line">      &lt;div&gt;&#123;&#123; getFullName() &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">      &lt;div&gt;&#123;&#123; getFullName() &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">      &lt;!-- 通过computed计算属性 --&gt;</span><br><span class="line">      &lt;div&gt;&#123;&#123; fullName &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">      &lt;div&gt;&#123;&#123; fullName &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;template&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;.&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    const vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#id&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">          firstName: &#39;li&#39;,</span><br><span class="line">          lastName: &#39;tang&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        getFullName: function()&#123;</span><br><span class="line">          console.log(&#39;fullName&#39;);</span><br><span class="line">          return this.firstName + &#39; &#39; + this.lastName;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      computed: &#123;</span><br><span class="line">        fullName: function()&#123;</span><br><span class="line">          console.log(&#39;fullName&#39;)</span><br><span class="line">          return this.firstName + &#39; &#39; + this.lastName;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h2 id="Vue的MVVM"><a href="#Vue的MVVM" class="headerlink" title="Vue的MVVM"></a>Vue的MVVM</h2><ul><li>MVVM分为三个部分：分别是M（Model，模型层 ），V（View，视图层），VM（ViewModel，V与M连接的桥梁，也可以看作为控制器）</li></ul><ol><li><p>M：模型层，主要负责业务数据相关；Data数据</p></li><li><p>V：视图层，顾名思义，负责视图相关，细分下来就是html+css层；就是DOM</p></li><li><p>VM：V与M沟通的桥梁，负责监听M或者V的修改，是实现MVVM双向绑定的要点；在Vue中就是Vue</p></li></ol><p>MVVM支持双向绑定，意思就是当M层数据进行修改时，VM层会监测到变化，并且通知V层进行相应的修改，反之修改V层则会通知M层数据进行修改，以此也实现了视图与模型层的相互解耦；</p><ul><li><p>关系图</p><p><img src="C:%5CUsers%5C10095%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1569394768937.png" alt="1569394768937"></p></li></ul><h4 id="vue的生命周期函数"><a href="#vue的生命周期函数" class="headerlink" title="vue的生命周期函数"></a>vue的生命周期函数</h4><ul><li></li></ul><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>组件的使用分成三个步骤：</p><ol><li><p>创建组件构造器</p><p>调用Vue.extend()方法创建组件构造器</p></li><li><p>注册组件</p><p>调用Vue.component()方法注册组件</p></li><li><p>使用组件</p><p>在Vue实例的作用范围内使用组件</p></li></ol><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><h4 id="全局组件和局部组件"><a href="#全局组件和局部组件" class="headerlink" title="全局组件和局部组件"></a>全局组件和局部组件</h4><p>注册组件(全局组件，意味着可以在多个Vue的实例下面使用)</p><p> Vue.component(‘my-cpn’, cpnC)</p><p>注册的组件挂载在某个实例中，那么就是一个局部组件</p><p>​      components: {</p><p>​        ‘my-cpn’: myComponent</p><p>​      }</p><p><strong>为什么组件data时一个函数？</strong></p><p>为了能够实现数据的互不干扰，能够复用，如果直接使用对象，在实例中的数据更改会指向同一个对象 ，函数每次调用会产生不同的对象，有新的地址。</p><h4 id="注册组件语法糖"><a href="#注册组件语法糖" class="headerlink" title="注册组件语法糖"></a>注册组件语法糖</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;id&quot;&gt;</span><br><span class="line">  &lt;cpn2&gt;&lt;&#x2F;cpn2&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;template id&#x3D;&quot;cpn&quot;&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;我是标题1&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;p&gt;我是内容&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;..&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  &#x2F;&#x2F;创建第一个组件构造器(子组件)</span><br><span class="line">  const cpn1 &#x3D; &#123;</span><br><span class="line">    template: &#39;#cpn&#39;</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F;创建第二个组件构造器(父组件)</span><br><span class="line">  const cpnC2 &#x3D; &#123;</span><br><span class="line">    template: &#96;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;我是标题2&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;p&gt;我是内容&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;cpn1&gt;&lt;&#x2F;cpn1&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;&#96;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      cpn1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F;root根组件</span><br><span class="line">  const vm &#x3D; new Vue(&#123;</span><br><span class="line">    el: &#39;#id&#39;,</span><br><span class="line">    data: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      cpn2: cpnC2</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><ul><li>组件数据的存放</li></ul><p>组件对象也有一个data属性(也可以有methods等属性)，data属性必须时一个函数，而且这个函数返回一个对象，对象内部保存着数据，如上</p><h4 id="父组件和子组件"><a href="#父组件和子组件" class="headerlink" title="父组件和子组件"></a>父组件和子组件</h4><p>组件之间存在层级关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   &#x2F;&#x2F;创建第一个组件构造器(子组件)</span><br><span class="line">   const cpnC1 &#x3D; Vue.extend(&#123;</span><br><span class="line">     template: &#96;</span><br><span class="line">     &lt;div&gt;</span><br><span class="line">       &lt;h2&gt;我是标题1&lt;&#x2F;h2&gt;</span><br><span class="line">       &lt;p&gt;我是内容&lt;&#x2F;p&gt;</span><br><span class="line">     &lt;&#x2F;div&gt;</span><br><span class="line">     &#96;</span><br><span class="line">   &#125;)</span><br><span class="line">   &#x2F;&#x2F;创建第二个组件构造器(父组件)</span><br><span class="line">   const cpnC2 &#x3D; Vue.extend(&#123;</span><br><span class="line">     template: &#96;</span><br><span class="line">     &lt;div&gt;</span><br><span class="line">       &lt;h2&gt;我是标题2&lt;&#x2F;h2&gt;</span><br><span class="line">       &lt;p&gt;我是内容&lt;&#x2F;p&gt;</span><br><span class="line">       &lt;cpn1&gt;&lt;&#x2F;cpn1&gt;</span><br><span class="line">     &lt;&#x2F;div&gt;</span><br><span class="line">     &#96;,</span><br><span class="line">     components: &#123;</span><br><span class="line">       cpn1: cpnC1</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">   const vm &#x3D; new Vue(&#123;</span><br><span class="line">     el: &#39;#id&#39;,</span><br><span class="line">     data: &#123;</span><br><span class="line">       components: &#123;</span><br><span class="line">         cpn2: cpnC2</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     methods: &#123;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>vm实例也可以当作是一个组件，最顶层的组件root组件，在vue实例对应的实例div中，子标签不能直接使用，子组件在父组件中注册时，Vue会编译号父组件的模块，此时父组件的模板中已经全是将要渲染的HTML，包括子组件中的模板内容了。</p><h4 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h4><ul><li><p>通过props向子组件传递数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;1. 子组件</span><br><span class="line"> &#x2F;&#x2F;父传子： props</span><br><span class="line"> const cpn &#x3D; &#123;</span><br><span class="line">   template: &#39;#cpn1&#39;,</span><br><span class="line">   &#x2F;&#x2F;数组形式</span><br><span class="line">   &#x2F;&#x2F; props: [&#39;cmovies&#39;],</span><br><span class="line">   &#x2F;&#x2F;写成对象形式</span><br><span class="line">   props: &#123;</span><br><span class="line">     &#x2F;&#x2F;1.类型限制</span><br><span class="line">     &#x2F;&#x2F; cmovies: Array,</span><br><span class="line"></span><br><span class="line">     &#x2F;&#x2F;2.提供一些默认值</span><br><span class="line">     &#x2F;&#x2F;类型是对象或者数组时，默认值必须是一个函数</span><br><span class="line">       cmovies: &#123;</span><br><span class="line">         type: String,        &#x2F;&#x2F;默认类型</span><br><span class="line">         default: &#39;aaaaaaa&#39;,  &#x2F;&#x2F;默认值</span><br><span class="line">         required: true       &#x2F;&#x2F;表示必须传的值</span><br><span class="line">       &#125;,</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>通过事件向父组件发送消息</p><p>当子组件需要向符组件传递数据时就要用到自定义事件，用v-on监听组件间的自定义事件</p><p>在子组件中，通过$emit()来触发事件，在父组件中，通过v-on来监听子组件事件</p></li></ul><p><strong>一个父组件中，一个子组件可以传事件给父组件，父组件根据事件，可以做其他操作，例如显示另一个子组件的内容</strong></p><p>其中props要求驼峰标识，在组件实例化的里面cIfo要写成c-info</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- props中的驼峰标识 --&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;id&quot;&gt;</span><br><span class="line">      &lt;!-- 这里用-i换I --&gt;</span><br><span class="line">      &lt;cpn2 :c-info&#x3D;&quot;info&quot;&gt;&lt;&#x2F;cpn2&gt;   </span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;!-- 当模板中代码比较多时 要有一个根元素 --&gt;</span><br><span class="line">    &lt;template id&#x3D;&quot;cpn2&quot;&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">  </span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;template&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">  </span><br><span class="line">      const cpn2 &#x3D; &#123;</span><br><span class="line">        template: &#39;#cpn2&#39;,</span><br><span class="line">        props: &#123;</span><br><span class="line">          cInfo: &#123;</span><br><span class="line">            type: Object,</span><br><span class="line">            default()&#123;</span><br><span class="line">  </span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      const vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#id&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">          info:&#123;</span><br><span class="line">            name: &#39;why&#39;,</span><br><span class="line">            age: 18</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">        &#125;,</span><br><span class="line">  </span><br><span class="line">      &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h4 id="父子组件的访问方式"><a href="#父子组件的访问方式" class="headerlink" title="父子组件的访问方式"></a>父子组件的访问方式</h4><ul><li>父组件访问子组件</li></ul><ol><li>$children</li><li>$refs</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">        &#x2F;&#x2F; 1. 通过$children可以拿到子组件对象 存放在数组中</span><br><span class="line">        btnClick()&#123;</span><br><span class="line">        &#x2F;&#x2F;   console.log(this.$children);</span><br><span class="line">        &#x2F;&#x2F;   for(let c of this.$children)&#123;</span><br><span class="line">        &#x2F;&#x2F;     console.log(c.name);</span><br><span class="line">        &#x2F;&#x2F;   &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;2. $refs</span><br><span class="line">        console.log(this.$refs.aaa); &#x2F;&#x2F;可以取到aaa的子组件</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ul><li>子组件访问父组件 较少</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">btnClick() &#123;</span><br><span class="line">                 &#x2F;&#x2F;1. 访问父组件$parent</span><br><span class="line">                 console.log(this.$parent)</span><br><span class="line"></span><br><span class="line">                 &#x2F;&#x2F;2. 访问根组件$root</span><br><span class="line">                 console.log(this.$root);  &#x2F;&#x2F;这里取到的时Vue实例</span><br><span class="line">               &#125;</span><br></pre></td></tr></table></figure><h2 id="插槽slot"><a href="#插槽slot" class="headerlink" title="插槽slot"></a>插槽slot</h2><h3 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h3><p>给组件添加插槽，用于改变组件中内容，具备扩展性。</p><p>例如同一个导航栏搜索栏 有相同部分和不同部分 不同部分使用slot便于扩展。</p><p>这时封装组件时要注意，最好的封装方式就是将共性抽取到组件中，将不同暴露为插槽，使用者可以根据自己的需求，决定插槽中插入什么内容。</p><ol><li><p>插槽的默认使用 <slot></slot></p></li><li><p>插槽的默认值，直接在slot里写 <slot><button>按钮</button></slot></p></li><li><p>如果有多个值，同时放入组件中进行替换时，一起作为替换元素</p></li></ol><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p>可以指定某一个插槽的内容，给插槽一个name属性指定</p><h3 id="作用域插槽的使用"><a href="#作用域插槽的使用" class="headerlink" title="作用域插槽的使用"></a>作用域插槽的使用</h3><p><strong>编译作用域：父组件模板的所有东西都会在父级作用域内编译；子组件模板的所有东西都会在子级作用域内编译</strong></p><p><strong>作用域插槽准备 父组件替换插槽的标签，但是内容由子组件来提供,父组件想要将子组件的内容换一种方式展示</strong></p><p>在父组件使用我们的子组件时，从子组件拿到数据</p><ul><li>在使用子组件中我们通过<template slot-scope="slot">获取到slot属性</li><li>再通过slot.data就可以获取到我们刚传入的data了</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;id&quot;&gt;</span><br><span class="line">    &lt;cpn&gt;&lt;&#x2F;cpn&gt;</span><br><span class="line">    &lt;cpn&gt;</span><br><span class="line">      &lt;!-- 目的是获取子组件的数据pLanguages 以-作为分割--&gt;</span><br><span class="line">      &lt;template slot-scope&#x3D;&quot;slot&quot;&gt;</span><br><span class="line">        &lt;!-- &lt;span v-for&#x3D;&quot;item in slot.data&quot;&gt;&#123;&#123;item&#125;&#125; -&lt;&#x2F;span&gt; --&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123;slot.data.join(&#39; - &#39;)&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;&#x2F;template&gt;</span><br><span class="line">    &lt;&#x2F;cpn&gt;</span><br><span class="line">    &lt;cpn&gt;&lt;&#x2F;cpn&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">  </span><br><span class="line">&lt;template id&#x3D;&quot;cpn&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;slot :data&#x3D;&quot;pLanguages&quot;&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &lt;li v-for&#x3D;&quot;item in pLanguages&quot;&gt;&#123;&#123;item&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;&#x2F;ul&gt;</span><br><span class="line">      &lt;&#x2F;slot&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">components: &#123;</span><br><span class="line">        cpn: &#123;</span><br><span class="line">          template: &#39;#cpn&#39;,</span><br><span class="line">          data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">              pLanguages: [&#39;javascript&#39;, &#39;c&#39;, &#39;java&#39;, &#39;Python&#39;]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h2 id="模块化开发"><a href="#模块化开发" class="headerlink" title="模块化开发"></a>模块化开发</h2><p>为什么要模块化？</p><p>因为模块化的代码只会运行在模块作用域，不会污染全局作用域，并且复用性高</p><p>模块化有两个核心：导出和导入</p><h3 id="一、CommonJS的导出："><a href="#一、CommonJS的导出：" class="headerlink" title="一、CommonJS的导出："></a>一、CommonJS的导出：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;这里是exports 不是export</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">flag: true,</span><br><span class="line">test(a,b)&#123;</span><br><span class="line">return a + b;</span><br><span class="line">&#125;,</span><br><span class="line">demo(a,b)&#123;</span><br><span class="line">return a * b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CommonJS的导入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; CommonJS模块</span><br><span class="line">let &#123;test ,demo ,flag&#125; &#x3D; require(&#39;.&#x2F;aaa.js&#39;);</span><br><span class="line">let &#123;test ,demo ,flag&#125; &#x3D; require(&#39;moduleA&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;等同于</span><br><span class="line">let _mA &#x3D; require(&#39;moduleA&#39;);</span><br><span class="line">let test &#x3D; _mA.test;</span><br><span class="line">let demo &#x3D; _mA.demo;</span><br><span class="line">let flag &#x3D; _mA.flag;</span><br></pre></td></tr></table></figure><h3 id="二、ES的模块化实现"><a href="#二、ES的模块化实现" class="headerlink" title="二、ES的模块化实现"></a>二、ES的模块化实现</h3><h3 id="export-import"><a href="#export-import" class="headerlink" title="export/import"></a>export/import</h3><h4 id="export指令"><a href="#export指令" class="headerlink" title="export指令"></a>export指令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let name &#x3D; &#39;why&#39;</span><br><span class="line">let age &#x3D; 18</span><br><span class="line">let height &#x3D; 1.88</span><br><span class="line"></span><br><span class="line">export &#123;name, age, height&#125;</span><br></pre></td></tr></table></figure><h4 id="import指令"><a href="#import指令" class="headerlink" title="import指令"></a>import指令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123;name, age&#125; from &quot;.&#x2F;xxx.js&quot;</span><br></pre></td></tr></table></figure><p>某个情况下，一个模块中包含某个的功能，我们并不希望给这个功能命名，而且让导入者可以自己来命名</p><ul><li>这个时候可以使用export default; <strong>注意export default在同一个模块中，不允许同时存在多个</strong></li></ul><p><strong>vscode运行在node环境下，node用的是commonjs模块机制，import语法是es6提出来的模块机制，vscode用这个会报错</strong></p><h3 id="三、webpack"><a href="#三、webpack" class="headerlink" title="三、webpack"></a>三、webpack</h3><p>webpack可以让我们进行模块化开发，并且会帮助我们处理模块间的依赖关系，并且将其进行整合打包。前端模块化的打包工具。</p><p>grunt/gulp和webpack的不同：</p><p>grunt/gulp更加强调的时前端流程的自动化，模块化不是它的核心。</p><p>webpack更加强调模块化开发管理，二文件压缩合并、预处理等功能，是他附带的功能。</p><ul><li><p>准备工作</p><p><img src="C:%5CUsers%5C10095%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1571037177507.png" alt="1571037177507"></p></li><li><p>在packge.json中定义启动</p></li></ul><p><img src="C:%5CUsers%5C10095%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1571032576286.png" alt="1571032576286"></p><p>安装本地局部的webpack：npm install <a href="mailto:webpack@3.6.0">webpack@3.6.0</a> –save-dev</p><ul><li>局部安装 –save-dev 是开发时依赖，项目打包后不许继续使用的</li><li>安装完后本地会有一个node_modules文件夹</li></ul><p>局部使用webpack： .\node_modules.bin\webpack</p><h4 id="什么是loader？"><a href="#什么是loader？" class="headerlink" title="什么是loader？"></a>什么是loader？</h4><p>webpack会自动处理js之间相关的依赖，但是我们不仅仅由基本的js代码处理，我们也许哟啊加载css、图片，包括一些高级的将ES6转成ES5代码，将TypeScript转成ES5代码，将scss、less转成css，将/jsx、.vue转成js文件等。</p><p>这时要给webpack扩展对应的loader。</p><ol><li>通过npm安装需要的loader</li><li>在webpack.config.js中的module关键字下进行配置</li></ol><p><strong>图片资源的加载也需要配置</strong></p><p>使用url-loder和file-loader  其中配置图片的存储路径和存储名字</p><p><img src="C:%5CUsers%5C10095%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1571040255606.png" alt="1571040255606"></p><p><strong>ES6转ES5</strong></p><p>在webpack中如果需要ES6转ES5，使用babel对应的loader</p><p>npm install –save-dev babel-loader@7 babel-core babel-preset-es2015</p><h4 id="webpack使用vue配置"><a href="#webpack使用vue配置" class="headerlink" title="webpack使用vue配置"></a>webpack使用vue配置</h4><p>npm install vue –save</p><h2 id="vue的使用"><a href="#vue的使用" class="headerlink" title="vue的使用"></a>vue的使用</h2><h3 id="el和template区别"><a href="#el和template区别" class="headerlink" title="el和template区别"></a>el和template区别</h3><p>原来data中的数据显示在界面中，要修改需要到html文件湖中修改，然而后面的开发中不希望手动的来频繁修改html文件。</p><p>在vue实例中定义template属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#39;#app&#39;,</span><br><span class="line">  template: &#96;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &#96;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: &#39;xiaolizi&#39;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>同时有el和template template会将el的东西替换掉</p><h3 id="vue文件封装处理"><a href="#vue文件封装处理" class="headerlink" title=".vue文件封装处理"></a>.vue文件封装处理</h3><p>安装vue-loader和vue-template-compiler</p><p>npm install vue-loader vue-template-compiler –save-dev</p><h3 id="认识plugin"><a href="#认识plugin" class="headerlink" title="认识plugin"></a>认识plugin</h3><p>loader主要用于转换某些类型的模块，是一个转换器</p><p>piugin是插件，它是对webpack本身的扩展，是一个扩展器</p><ol><li>通过npm安装需要使用的plugins</li><li>在webpack.config.js中的plugins中配置插件</li></ol><ul><li><strong>打包html的plugin</strong></li></ul><p>在真实发布项目时，发布的是dist文件夹的内容，但是dist文件夹中没用index.html文件的，</p><p>HtmlWebpackPligin插件可以：自动生成一个index.html文件（可以制定模板生成） 将打包的js文件，自动通过script标签插入到body中</p><ul><li><strong>压缩Js的plugin</strong></li></ul><p>项目发布前要对打包的js文件进行压缩</p><p>这里使用第三方插件uglifyjs-webpack-plugin，并且版本号指定1.1.1，和CLI2保持一致</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install uglifyjs-webpack-plugin@1.1.1 --save-dev</span><br></pre></td></tr></table></figure><p>修改webpack.config.js文件</p><h3 id="搭建本地服务器"><a href="#搭建本地服务器" class="headerlink" title="搭建本地服务器"></a>搭建本地服务器</h3><p>webpack提供了一个可选的本地开发服务器，这个服务器基于node.js搭建，内部使用express框架，可以实现我们想要的让浏览器自动刷新显示我们修改后的结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack-dev-server@2.9.1</span><br></pre></td></tr></table></figure><p>在webpack.config.js中，设置devserver选项，它具有如下属性：</p><p>contentBase:为哪一个文件夹提供本地服务，默认啊hi根文件夹，我们这里要填写发布的文件夹./dist</p><p>port:端口号</p><p>inline：页面实时刷新</p><p>historyApiFallback:在SPA页面中，依赖HTML5的history模式</p><h3 id="配置文件的分离"><a href="#配置文件的分离" class="headerlink" title="配置文件的分离"></a>配置文件的分离</h3><p>将生产环境配置与开发环境配置实现分离</p><p>需要安装webpack-merge</p><h2 id="Vue-CLI"><a href="#Vue-CLI" class="headerlink" title="Vue CLI"></a>Vue CLI</h2><p>使用vue-cli可以快速搭建Vue开发环境以及对应的webpack配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">安装：npm install -g @vue&#x2F;cli</span><br><span class="line">安装2.0模板：npm install -g @vue&#x2F;cli-init</span><br></pre></td></tr></table></figure><p>Vue CLI2初始化项目</p><p>vue init webpack  my-project</p><p>Vue CLI3初始化项目</p><p>vue create my-project</p><h3 id="Vue-CLI2初始化项目过程"><a href="#Vue-CLI2初始化项目过程" class="headerlink" title="Vue CLI2初始化项目过程"></a>Vue CLI2初始化项目过程</h3><h3 id="runtime-compiler和runtime-only"><a href="#runtime-compiler和runtime-only" class="headerlink" title="runtime+compiler和runtime+only"></a>runtime+compiler和runtime+only</h3><p>vue运行</p><p>compiler: template -&gt; ast -&gt; render -&gt; vdom -&gt; UI(真实dom)</p><p>only: render -&gt; vdom -&gt; UI</p><p>性能更优，代码更少</p><p>这里的render函数 是由vue-template-compiler 把template解析成对象后</p><h3 id="Vue-CLI3构建项目"><a href="#Vue-CLI3构建项目" class="headerlink" title="Vue CLI3构建项目"></a>Vue CLI3构建项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm create 项目名称</span><br></pre></td></tr></table></figure><p><strong>CLI3的配置去哪了？</strong></p><p>使用 vue ui能有一个可视化界面，在里面可以更改配置；</p><p>或者在项目文件夹里新建vue.config.js文件</p><p>将需要的配置导入</p><h2 id="Vue-router"><a href="#Vue-router" class="headerlink" title="Vue-router"></a>Vue-router</h2><h3 id="前端渲染和后端渲染"><a href="#前端渲染和后端渲染" class="headerlink" title="前端渲染和后端渲染"></a>前端渲染和后端渲染</h3><ul><li>前端渲染    </li><li>后端渲染</li></ul><h3 id="安装和使用vue-router"><a href="#安装和使用vue-router" class="headerlink" title="安装和使用vue-router"></a>安装和使用vue-router</h3><p><strong>配置vue-router</strong></p><p>在router/index.js中配置</p><ol><li>导入路由对象，并且调用Vue.use(VueRouter)</li><li>创建路由实例，并且传入路由映射配置</li><li>在Vue实例中挂载创建的路由实例</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import VueRouter from &#39;vue-router&#39;</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br></pre></td></tr></table></figure><p><strong>路由的默认路径</strong></p><p>默认情况下，我们希望router-view直接渲染首页的内容</p><p>但是我们的实现中默认没有显示首页组件，必须要用户点击</p><p>所以我们要多配置一个映射关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const routes &#x3D; [</span><br><span class="line">&#123;</span><br><span class="line">path: &#39;&#x2F;&#39;,</span><br><span class="line">redirect: &#39;&#x2F;home&#39;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>改成html5的history模式，在配置路由的映射中添加 mode：’history’</strong></p><h4 id="路由的呈现router-link、router-view和用代码跳转路由"><a href="#路由的呈现router-link、router-view和用代码跳转路由" class="headerlink" title="路由的呈现router-link、router-view和用代码跳转路由"></a>路由的呈现router-link、router-view和用代码跳转路由</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- 使用路由 --&gt;</span><br><span class="line">    &lt;!-- &lt;router-link to&#x3D;&quot;&#x2F;home&quot; tag&#x3D;&quot;button&quot; replace&gt;首页&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;about&quot; tag&#x3D;&quot;button&quot; replace&gt;关于&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;&#x2F;router-view&gt; --&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;homeClick&quot;&gt;首页&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;aboutClick&quot;&gt;关于&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    homeClick()&#123;</span><br><span class="line">      &#x2F;&#x2F; this.$router.push(&#39;.&#x2F;home&#39;)</span><br><span class="line">      this.$router.replace(&#39;.&#x2F;home&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    aboutClick()&#123;</span><br><span class="line">      &#x2F;&#x2F; this.$router.push(&#39;.&#x2F;about&#39;)</span><br><span class="line">      this.$router.repalce(&#39;.&#x2F;about&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="动态路由的使用"><a href="#动态路由的使用" class="headerlink" title="动态路由的使用"></a>动态路由的使用</h3>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Vue-声明式编程&quot;&gt;&lt;a href=&quot;#Vue-声明式编程&quot; class=&quot;headerlink&quot; title=&quot;Vue 声明式编程&quot;&gt;&lt;/a&gt;Vue 声明式编程&lt;/h1&gt;&lt;h2 id=&quot;vue指令-基本语法&quot;&gt;&lt;a href=&quot;#vue指令-基本语法&quot; class=&quot;headerlink&quot; title=&quot;vue指令/基本语法&quot;&gt;&lt;/a&gt;vue指令/基本语法&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="vue笔记" scheme="http://yoursite.com/tags/vue%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/03/23/hello-world/"/>
    <id>http://yoursite.com/2020/03/23/hello-world/</id>
    <published>2020-03-23T04:11:06.908Z</published>
    <updated>2020-03-23T04:11:06.908Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>e的移动尺寸变化和div移动的尺寸变化</title>
    <link href="http://yoursite.com/2020/03/18/%E4%BA%8B%E4%BB%B6%E6%BA%90e%E5%92%8Cdiv%E7%9A%84%E5%B0%BA%E5%AF%B8%E5%8F%98%E5%8C%96/"/>
    <id>http://yoursite.com/2020/03/18/%E4%BA%8B%E4%BB%B6%E6%BA%90e%E5%92%8Cdiv%E7%9A%84%E5%B0%BA%E5%AF%B8%E5%8F%98%E5%8C%96/</id>
    <published>2020-03-18T08:16:42.000Z</published>
    <updated>2020-03-22T14:30:11.543Z</updated>
    
    <content type="html"><![CDATA[<h4 id="遇到类似拖拽，滑动等效果时，总是有点分不清楚-判断鼠标点击事件时的鼠标距离和作用div的距离，总结一下"><a href="#遇到类似拖拽，滑动等效果时，总是有点分不清楚-判断鼠标点击事件时的鼠标距离和作用div的距离，总结一下" class="headerlink" title="遇到类似拖拽，滑动等效果时，总是有点分不清楚 判断鼠标点击事件时的鼠标距离和作用div的距离，总结一下"></a>遇到类似拖拽，滑动等效果时，总是有点分不清楚 判断鼠标点击事件时的鼠标距离和作用div的距离，总结一下</h4><a id="more"></a><p>对于点击事件源e来说</p><h3 id="clientX，clientY"><a href="#clientX，clientY" class="headerlink" title="clientX，clientY"></a>clientX，clientY</h3><p>点击位置距离当前可视区域的x，y坐标</p><h3 id="pageX-pageY"><a href="#pageX-pageY" class="headerlink" title="pageX,pageY"></a>pageX,pageY</h3><p>对于整个页面来说，包括了被卷去的body部分的长度</p><h3 id="screenX，screenY"><a href="#screenX，screenY" class="headerlink" title="screenX，screenY"></a>screenX，screenY</h3><p>点击位置距离当前电脑屏幕边界的x，y坐标</p><h3 id="offsetX，offsetY"><a href="#offsetX，offsetY" class="headerlink" title="offsetX，offsetY"></a>offsetX，offsetY</h3><p>相对于带有定位的父盒子的x，y坐标</p><p>对于div来说</p><p><img src="https://i.loli.net/2020/03/18/L2BAZu7bdDnURhf.png" alt="尺寸1.png">))<br><img src="https://i.loli.net/2020/03/18/UdwDeolS2MfzxPh.png" alt="尺寸2.png"><br><img src="https://i.loli.net/2020/03/18/xY7n6vbyPh9akq8.png" alt="尺寸3.png"><br><img src="https://i.loli.net/2020/03/18/pOcIh5bjENtweF9.jpg" alt="尺寸4.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;遇到类似拖拽，滑动等效果时，总是有点分不清楚-判断鼠标点击事件时的鼠标距离和作用div的距离，总结一下&quot;&gt;&lt;a href=&quot;#遇到类似拖拽，滑动等效果时，总是有点分不清楚-判断鼠标点击事件时的鼠标距离和作用div的距离，总结一下&quot; class=&quot;headerlink&quot; title=&quot;遇到类似拖拽，滑动等效果时，总是有点分不清楚 判断鼠标点击事件时的鼠标距离和作用div的距离，总结一下&quot;&gt;&lt;/a&gt;遇到类似拖拽，滑动等效果时，总是有点分不清楚 判断鼠标点击事件时的鼠标距离和作用div的距离，总结一下&lt;/h4&gt;
    
    </summary>
    
    
    
      <category term="关于e.clientX 和 div的clientX等其他属性的变化!" scheme="http://yoursite.com/tags/%E5%85%B3%E4%BA%8Ee-clientX-%E5%92%8C-div%E7%9A%84clientX%E7%AD%89%E5%85%B6%E4%BB%96%E5%B1%9E%E6%80%A7%E7%9A%84%E5%8F%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>实现不设置宽高的盒子的居中</title>
    <link href="http://yoursite.com/2020/03/16/%E5%AE%9E%E7%8E%B0%E4%B8%8D%E8%AE%BE%E7%BD%AE%E5%AE%BD%E9%AB%98%E7%9A%84%E7%9B%92%E5%AD%90%E7%9A%84%E5%B1%85%E4%B8%AD/"/>
    <id>http://yoursite.com/2020/03/16/%E5%AE%9E%E7%8E%B0%E4%B8%8D%E8%AE%BE%E7%BD%AE%E5%AE%BD%E9%AB%98%E7%9A%84%E7%9B%92%E5%AD%90%E7%9A%84%E5%B1%85%E4%B8%AD/</id>
    <published>2020-03-16T06:54:56.000Z</published>
    <updated>2020-03-18T12:01:23.939Z</updated>
    
    <content type="html"><![CDATA[<h3 id="有两个div，子盒子相对父盒子绝对定位，要实现垂直水平居中，但子盒子没有给定宽度，这个时候要怎么实现"><a href="#有两个div，子盒子相对父盒子绝对定位，要实现垂直水平居中，但子盒子没有给定宽度，这个时候要怎么实现" class="headerlink" title="有两个div，子盒子相对父盒子绝对定位，要实现垂直水平居中，但子盒子没有给定宽度，这个时候要怎么实现?"></a>有两个div，子盒子相对父盒子绝对定位，要实现垂直水平居中，但子盒子没有给定宽度，这个时候要怎么实现?</h3><a id="more"></a><ul><li>用css的transform中的translate可以实现,translate控制移动自身宽度的50%刚好实现垂直水平居中</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 有两个div div2在div1中要实现垂直水平居中 --&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  *&#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0%;</span><br><span class="line">  &#125;</span><br><span class="line">  .div1 &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    width: 500px;</span><br><span class="line">    height: 500px;</span><br><span class="line">    background-color: green;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .div2 &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    max-width: 300px;</span><br><span class="line">    max-height: 300px;</span><br><span class="line">    background-color: blue;</span><br><span class="line">    left: 50%;</span><br><span class="line">    top: 50%;</span><br><span class="line">    transform: translate(-50%,-50%)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;div1&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;div2&quot;&gt;</span><br><span class="line">      daskjfhljsadhfkj</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;有两个div，子盒子相对父盒子绝对定位，要实现垂直水平居中，但子盒子没有给定宽度，这个时候要怎么实现&quot;&gt;&lt;a href=&quot;#有两个div，子盒子相对父盒子绝对定位，要实现垂直水平居中，但子盒子没有给定宽度，这个时候要怎么实现&quot; class=&quot;headerlink&quot; title=&quot;有两个div，子盒子相对父盒子绝对定位，要实现垂直水平居中，但子盒子没有给定宽度，这个时候要怎么实现?&quot;&gt;&lt;/a&gt;有两个div，子盒子相对父盒子绝对定位，要实现垂直水平居中，但子盒子没有给定宽度，这个时候要怎么实现?&lt;/h3&gt;
    
    </summary>
    
    
    
      <category term="判断事件点击拖拽时距离" scheme="http://yoursite.com/tags/%E5%88%A4%E6%96%AD%E4%BA%8B%E4%BB%B6%E7%82%B9%E5%87%BB%E6%8B%96%E6%8B%BD%E6%97%B6%E8%B7%9D%E7%A6%BB/"/>
    
  </entry>
  
  <entry>
    <title>闭包</title>
    <link href="http://yoursite.com/2019/09/25/%E9%97%AD%E5%8C%85/"/>
    <id>http://yoursite.com/2019/09/25/%E9%97%AD%E5%8C%85/</id>
    <published>2019-09-25T04:50:23.000Z</published>
    <updated>2020-03-18T12:00:38.920Z</updated>
    
    <content type="html"><![CDATA[<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><a id="more"></a><ul><li><p>闭包就是指由权访问另一个函数作用域中的变量的函数。</p></li><li><p>创建闭包的常见的方式就是在一个函数内部创建另一个函数</p><p>当内部函数被保存到外部时，将会生成闭包；闭包会导致原有</p><p>作用链不释放，造成内存泄漏。</p></li></ul><p><strong><strong>内存泄漏可以理解为有用的内存因为原有作用链不释放，导致越来越少，就像是内存泄漏了一样</strong></strong></p><p>​    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function a()&#123;</span><br><span class="line"></span><br><span class="line">        var num &#x3D; 100;</span><br><span class="line"></span><br><span class="line">        function b()&#123;</span><br><span class="line"></span><br><span class="line">            num ++;</span><br><span class="line"></span><br><span class="line">            console.log(num);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return b;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">    var demo &#x3D; a();</span><br><span class="line"></span><br><span class="line">    demo(); &#x2F;&#x2F;101</span><br><span class="line"></span><br><span class="line">    demo(); &#x2F;&#x2F;100</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function a() &#123;</span><br><span class="line"></span><br><span class="line">        function b() &#123;</span><br><span class="line"></span><br><span class="line">            var bbb &#x3D; 234;</span><br><span class="line"></span><br><span class="line">            document.write(aaa);</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var aaa &#x3D; 123;</span><br><span class="line"></span><br><span class="line">        return b;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        var glob &#x3D; 100;</span><br><span class="line"></span><br><span class="line">        var demo &#x3D; a();</span><br><span class="line"></span><br><span class="line">        demo();</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里有对局部和全局变量有一个模糊的印象</span><br></pre></td></tr></table></figure> <!-- more --><h3 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h3><ul><li><p>实现公有变量</p><p>  eg:函数累加器</p></li><li><p>可以做缓存</p><p>  eg:eater</p></li><li><p>可以实现封装，属性私有化。</p><p>  eg: Person();</p></li><li><p>模块化开发，防止污染全局变量</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var name &#x3D; &#39;bcd&#39;;</span><br><span class="line"></span><br><span class="line">        var init &#x3D; (function ()&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            var name &#x3D; &#39;abc&#39;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            function callName()&#123;</span><br><span class="line"></span><br><span class="line">                console.log(name);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            return function()&#123;</span><br><span class="line"></span><br><span class="line">                callName();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;())</span><br><span class="line"></span><br><span class="line">        init();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;运行后的结果为 abc</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;这就是用闭包实现变量的私有化，函数中的变量在外部调用不会污染全局变量</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;以后用于模块化开发 防止污染全局变量</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;闭包&quot;&gt;&lt;a href=&quot;#闭包&quot; class=&quot;headerlink&quot; title=&quot;闭包&quot;&gt;&lt;/a&gt;闭包&lt;/h2&gt;
    
    </summary>
    
    
    
      <category term="闭包的最初笔记" scheme="http://yoursite.com/tags/%E9%97%AD%E5%8C%85%E7%9A%84%E6%9C%80%E5%88%9D%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>ES笔记</title>
    <link href="http://yoursite.com/2019/09/25/ES%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/09/25/ES%E7%AC%94%E8%AE%B0/</id>
    <published>2019-09-25T03:38:20.000Z</published>
    <updated>2020-03-18T12:00:22.192Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><a id="more"></a><p>动态语言 数据类型取决于取值<br>JS中分为七种内置类型，七种内置类型分为两大类型，基本类型和对象<br>基本类型有六种：null,undefined,boolean,number,string,symbol<br>NaN也属于number，并且NaN并不等于自身</p><ul><li>类型转换<br>对象在转换基本数据类型，首先会调用valueOf然后调用toString。并且这两个方法你是可以重写的<br>let a = {<pre><code>valueOf(){    return 0}</code></pre>}<br>当然你也可以重写Symbol.toPrimitive,该方法在转基本类型时调用优先级最高<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">let a &#x3D; &#123;</span><br><span class="line">  valueOf() &#123;</span><br><span class="line">    return 0;</span><br><span class="line">  &#125;,</span><br><span class="line">  toString() &#123;</span><br><span class="line">    return &#39;1&#39;;</span><br><span class="line">  &#125;,</span><br><span class="line">  [Symbol.toPrimitive]() &#123;</span><br><span class="line">    return 2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">1 + a &#x2F;&#x2F; &#x3D;&gt; 3</span><br><span class="line">&#39;1&#39; + a &#x2F;&#x2F; &#x3D;&gt; &#39;12&#39;</span><br></pre></td></tr></table></figure></li></ul><p>​        </p><h2 id="数字运算"><a href="#数字运算" class="headerlink" title="数字运算"></a>数字运算</h2><p>var a = 1 / 0 ;</p><p>// Infinity Number</p><p>var num = 0 / 0;</p><p>// NaN Not a Number</p><ul><li>四则运算符<br>只有当加法运算时，其中一方是字符串类型，就会把另一个也转为字符串类型。其他运算只要其中一方是数字，那么另一方就转为数字。并且假发运算会触发三种类型转换：将值转换为原始值，转换为数字，转换为字符串。</li></ul><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p><strong>&amp;&amp; || ！</strong></p><p>&amp;&amp;<br>先看第一表达式转换成布尔值的结果，如果结果为真，那么它会看第二个表达式转换为布尔值的结果，<br>然后如果只有两个表达式的话，只要看到第二个表达式，就可以返回该表达式的值了。</p><p>转换成 与 的抽象概念来进行值的运算</p><p>如果前面是真 那么后面不管是什么都输出后面，后面是真都为真，输出后面也为真，后面是假即为假，即输出后面的假的</p><p>undefined，null，NaN，“”，0，false ==&gt; false;</p><h2 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h2><p>   函数声明整体提升<br>   变量 声明提升<br>   <strong>预编译发生在函数执行的前一刻</strong></p><ol><li>创建AO对象 </li><li>找形参和变量声明，将变量和形参名作为AO属性名，值为undefined</li><li>将实参值和形参统一</li><li>在函数体里面找函数声明，值赋予函数体</li></ol><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><pre><code>scope chain --&gt; 0:AO            --&gt; 1:GO</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; 100;</span><br><span class="line">function demo(e) &#123;</span><br><span class="line">    function e() &#123; &#125;</span><br><span class="line">    arguments[0] &#x3D; 2;</span><br><span class="line">    document.write(e); &#x2F;&#x2F; 2</span><br><span class="line">    if (a) &#123;</span><br><span class="line">        var b &#x3D; 123;</span><br><span class="line">        function c() &#123;</span><br><span class="line">            &#x2F;&#x2F;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    var c;</span><br><span class="line">    a &#x3D; 10;</span><br><span class="line">    var a;</span><br><span class="line">    document.write(b); &#x2F;&#x2F;undefined</span><br><span class="line">    f &#x3D; 123;</span><br><span class="line">    document.write(c);&#x2F;&#x2F; undefined</span><br><span class="line">    document.write(a);&#x2F;&#x2F;10</span><br><span class="line">&#125;</span><br><span class="line">var a;</span><br><span class="line">demo(1);</span><br><span class="line">document.write(a); &#x2F;&#x2F;100</span><br><span class="line">document.write(f); &#x2F;&#x2F;123</span><br></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><ul><li>闭包就是指由权访问另一个函数作用域中的变量的函数。</li><li>创建闭包的常见的方式就是在一个函数内部创建另一个函数<br>当内部函数被保存到外部时，将会生成闭包；闭包会导致原有<br>作用链不释放，造成内存泄漏。</li></ul><p><strong>内存泄漏可以理解为有用的内存因为原有作用链不释放，导致越来越少，就像是内存泄漏了一样</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function a()&#123;</span><br><span class="line">        var num &#x3D; 100;</span><br><span class="line">        function b()&#123;</span><br><span class="line">            num ++;</span><br><span class="line">            console.log(num);</span><br><span class="line">        &#125;</span><br><span class="line">        return b;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">    var demo &#x3D; a();</span><br><span class="line">    demo(); &#x2F;&#x2F;101</span><br><span class="line">    demo(); &#x2F;&#x2F;100</span><br></pre></td></tr></table></figure><p><code>这里有对局部和全局变量有一个模糊的印象</code></p><h3 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h3><ul><li>实现公有变量<br>  eg:函数累加器</li><li>可以做缓存<br>  eg:eater</li><li>可以实现封装，属性私有化。<br>  eg: Person();</li><li>模块化开发，防止污染全局变量</li></ul><h2 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h2><ul><li>立即执行函数，执行完就会被销毁/释放，只被执行一次</li><li>针对初始化功能的函数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function ()&#123;</span><br><span class="line"></span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><p>能被执行符号执行的表达式就是立即执行函数/被忽视函数名</p><ul><li><ul><li>！() 都可以将函数变成表达式</li></ul></li><li><p>function(){</p><p>}();<br>(function(){</p><p>}())</p></li></ul><p>(function(){</p><p>})();</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var test &#x3D; function()&#123;</span><br><span class="line">    console.log(&#39;a&#39;);</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="对象的创建方法"><a href="#对象的创建方法" class="headerlink" title="对象的创建方法"></a>对象的创建方法</h3><p><strong>JS的对象创建不同于Java，c++，不需要类来定义属性和方法，直接在对象上定义属性和方法，更贴近面向对象，把对象当成一个真的的事物</strong></p><ol><li><p>var obj = {}   对象字面量/对象直接量</p></li><li><p>构造函数</p><ul><li><p>系统自带的构造函数 Object() Array() Number()</p><p>var obj = new Object();</p></li><li><p>自定义构造函数<br>//大驼峰式命名规则</p><p>function Person(){</p><p>}</p><p>var person1 = new Person();</p></li></ul><p> <strong>就相当于创建了一个空对象</strong></p></li></ol><h3 id="构造函数内部原理"><a href="#构造函数内部原理" class="headerlink" title="构造函数内部原理"></a>构造函数内部原理</h3><ol><li>在函数体的最前面隐式的加上this = {}</li><li>执行this.xxx = xxx;</li><li>隐式的返回this<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function Person(name,age,sex)&#123;</span><br><span class="line">    &#x2F;&#x2F;var this &#x3D; &#123;&#125;  一个空对象</span><br><span class="line">    this.name &#x3D; name; &#x2F;&#x2F; 往this里面加，name : &quot;xx&quot;,</span><br><span class="line">    this.age  &#x3D; age;</span><br><span class="line">    this.sex  &#x3D; sex;</span><br><span class="line">    &#x2F;&#x2F;return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var person1 &#x3D; new Person(&#39;zhangsan&#39;,18,&#39;man&#39;);</span><br></pre></td></tr></table></figure></li></ol><h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><ol><li>定义：原型是function对象的一个属性，它定义了构造函数制造出的对象的公共祖先。通过该构造函数产生的对象，可以继承该原型的属性和方法。<strong>原型也是对象。</strong></li><li>利用原型特点和概念，可以提取共有属性</li><li>对象如何查看原型 — &gt; 隐式属性 <em>proto</em></li><li>对象如何查看对象的构造函数 — &gt; constructor</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype  --原型</span><br><span class="line">Person.prototype &#x3D; &#123;&#125;  是祖先</span><br><span class="line">Person.prototype.name &#x3D; &quot;hehe&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function Person()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">var person &#x3D; new Person();</span><br><span class="line">&#x2F;&#x2F;新建的对象可以继承Person原型的属性和方法</span><br></pre></td></tr></table></figure><h2 id="call-apply"><a href="#call-apply" class="headerlink" title="call/apply"></a>call/apply</h2><ul><li>借用构造函数<br>作用，改变this指向。<br>区别，后面传的参数形式不同<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function Person(name, age, sex)&#123;</span><br><span class="line">            this.name &#x3D; name;</span><br><span class="line">            this.age &#x3D; age;</span><br><span class="line">            this.sex &#x3D; sex;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var person &#x3D; new Person(&#39;li&#39;, 18 , &#39;man&#39;);</span><br><span class="line"></span><br><span class="line">        var obj &#x3D; &#123;&#125;</span><br><span class="line"></span><br><span class="line">        Person.call(obj,&#39;tang&#39;,20,&#39;famale&#39;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;call 借用别人的方法实现自己的功能</span><br><span class="line">        输出obj</span><br><span class="line">        obj</span><br><span class="line">        &#123;name: &quot;tang&quot;, age: 20, sex: &quot;famale&quot;&#125;</span><br><span class="line">        person</span><br><span class="line">        Person &#123;name: &quot;li&quot;, age: 18, sex: &quot;man&quot;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function Person(name, age, sex) &#123;</span><br><span class="line">            this.name &#x3D; name;</span><br><span class="line">            this.age &#x3D; age;</span><br><span class="line">            this.sex &#x3D; sex;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        function Student(name, age, sex, tel, grade) &#123;</span><br><span class="line">            Person.call(this, name, age, sex);          &#x2F;&#x2F;这样来调用Person的方法</span><br><span class="line">            this.tel &#x3D; tel;</span><br><span class="line">            this.grade &#x3D; grade;</span><br><span class="line">        &#125;</span><br><span class="line">        var student &#x3D; new Student(&#39;tang&#39;, 18, &#39;female&#39;, 123, 99);</span><br></pre></td></tr></table></figure>call 需要把实参按照形参的个数传进去<br>apply 需要传一个arguments的形式<br>两者就是传参的形式不同<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person.apply(this,[name,age,se]);</span><br></pre></td></tr></table></figure></li></ul><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ol><li>传统形式<br> 过多的继承了没用的属性</li><li>借用构造函数<br> 不能继承借用构造函数的原型<br> 每次构造函数都要多走一个函数</li><li>共享原型<br> 不能随便改动自己的原型</li><li>圣杯模式</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">现在 - 圣杯模式 在共享原型基础上</span><br><span class="line">function inherit(Target, Origin)&#123;</span><br><span class="line">            function F()&#123;&#125;</span><br><span class="line">            F.prototype &#x3D; Origin.prototype;</span><br><span class="line">            Target.prototype &#x3D; new F();</span><br><span class="line">            Target.prototype.constuctor &#x3D; Target;</span><br><span class="line">            Target.prototype.uber &#x3D; Origin.prototype;  &#x2F;&#x2F;继承谁</span><br><span class="line">        &#125;</span><br><span class="line">        Father.prototype.lastName &#x3D; &#39;li&#39;;</span><br><span class="line">        function Father()&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        function Son()&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        inherit(Son, Father);</span><br><span class="line">        var son &#x3D; new Son();</span><br><span class="line">        var father &#x3D; new Father();</span><br><span class="line"></span><br><span class="line">        此时Son这个构造函数能够继承原来Father的原型的属性，而且自己能够更改原型属性的同时，不会影响到father的原型属性。</span><br></pre></td></tr></table></figure><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>定义一个命名空间</p><p>管理变量，防止污染全局，适用于模块化开发</p><h2 id="查看属性，对象枚举"><a href="#查看属性，对象枚举" class="headerlink" title="查看属性，对象枚举"></a>查看属性，对象枚举</h2><p>for  in 遍历对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var obj &#x3D; &#123;</span><br><span class="line">           name : &#39;ljh&#39;,</span><br><span class="line">           age : 123,</span><br><span class="line">           sex : &#39;male&#39;,</span><br><span class="line">           height : 180,</span><br><span class="line">           weight : 75</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       for(var prop in obj)&#123;</span><br><span class="line">           console.log(prop + &quot; &quot; + typeof(prop));</span><br><span class="line">           &#x2F;&#x2F;  下面结果为5个undefined，因为要想得到属性值，有了属性名后，</span><br><span class="line">           &#x2F;&#x2F; obj.prop --&gt;obj[&#39;prop&#39;]这时的prop就是字符串属性名，obj没有prop属性 所以返回undefined</span><br><span class="line">           &#x2F;&#x2F; conslole.log(obj.prop);    </span><br><span class="line">           console.log(obj[prop]);  &#x2F;&#x2F;属性值</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var obj &#x3D; &#123;</span><br><span class="line">            name: &#39;ljh&#39;,</span><br><span class="line">            age: 123,</span><br><span class="line">            sex: &#39;male&#39;,</span><br><span class="line">            height: 180,</span><br><span class="line">            weight: 75,</span><br><span class="line">            __proto__: &#39;deng&#39;  &#x2F;&#x2F;加上原型的属性，下面依然会打印</span><br><span class="line">        &#125;</span><br><span class="line">        for (var prop in obj) &#123;</span><br><span class="line">            &#x2F;&#x2F;加上hasOwnProperty方法判断prop是否为本身属性</span><br><span class="line">            if (obj.hasOwnProperty(prop)) &#123;</span><br><span class="line">                console.log(obj[prop]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ul><li>in 也可以判断属性是否为对象的，但是会将父类的也算进去</li></ul><ul><li>注意使用时要用字符串，不然会被系统当成变量，属性名是字符串</li></ul><p>‘height’ in obj   true<br>‘lastName’ in obj  true</p><p><strong>instanceof</strong></p><p>A instanceof B</p><p>看A对象的原型链上有没有 B的原型</p><p>A对象是不是B构造函数构造出来的</p><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><ol><li>函数预编译过程 this —&gt; window</li><li>全局作用域里 this —&gt; window</li><li>call/apply 可以改变函数运行时this指向</li><li>obj.func();   func()里面的this指向obj) 谁调用this指向谁</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;this 面试题</span><br><span class="line">var name &#x3D; &#39;222&#39;;</span><br><span class="line">var a &#x3D; &#123;</span><br><span class="line">    name : &#39;111&#39;,</span><br><span class="line">    say : function()&#123;</span><br><span class="line">        console.log(this.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br><span class="line">var fun &#x3D; a.say;  &#x2F;&#x2F;222 把a对象中的函数拿出来在全局执行 所有是全局的name</span><br><span class="line">fun();  </span><br><span class="line">a.say(); &#x2F;&#x2F;&#x2F;111</span><br><span class="line">var b &#x3D; &#123;</span><br><span class="line">    name : &quot;333&quot;,</span><br><span class="line">    say : function (fun)&#123;</span><br><span class="line">        &#x2F;&#x2F;this --&gt; b 这里面的this还是指向b，但是下面函数执行时直接执行，没有人调用，执行就是预编译环境，就是windows</span><br><span class="line">        fun();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">b.say(a.say);   &#x2F;&#x2F;222  a.say当成一个参数就是一个函数 然后在b里面被执行</span><br><span class="line">b.say &#x3D; a.say;</span><br><span class="line">b.say(); &#x2F;&#x2F;333</span><br></pre></td></tr></table></figure><h2 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h2><ul><li>arguments.callee 等于函数自身的引用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function test()&#123;</span><br><span class="line">    console.log(argumens.callee);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>test();</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var num &#x3D; (function (n)&#123;</span><br><span class="line">    if(n &#x3D;&#x3D; 1)&#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return n * arguments.callee(n - 1);</span><br><span class="line">&#125;(10))</span><br></pre></td></tr></table></figure><ul><li>caller 指函数被调用被执行时的环境时哪个环境</li></ul><h2 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h2><ul><li>浅层克隆<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var obj &#x3D; &#123;</span><br><span class="line">    name : &#39;tom&#39;,</span><br><span class="line">    age : 18,</span><br><span class="line">    sex : &#39;male&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var target &#x3D; &#123;&#125;</span><br><span class="line"></span><br><span class="line">function clone(origin, target)&#123;</span><br><span class="line">    var target &#x3D; target || &#123;&#125;;</span><br><span class="line">    for(var prop in origin)&#123;</span><br><span class="line">        target[prop] &#x3D; oringin[prop];</span><br><span class="line">    &#125;</span><br><span class="line">    return target;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;但是当对象有引用值(数组)时，改变target中的引用值，origin中的引用值也会改变</span><br></pre></td></tr></table></figure></li><li>深度克隆<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F;深度克隆</span><br><span class="line">&#x2F;&#x2F;遇到引用值时需要判断，何种引用值，新建一个引用，将原来的值填入</span><br><span class="line">&#x2F;&#x2F;遍历对象 for(var prop in obj)</span><br><span class="line">&#x2F;&#x2F;1.判断是否原始值(基本数据类型)  用typeof 判断是否object</span><br><span class="line">&#x2F;* 2.判断时数组还是对象 &#123;</span><br><span class="line">    istanceof toString constructor</span><br><span class="line">&#125; *&#x2F;</span><br><span class="line">&#x2F;&#x2F;3.建立相应的数组或对象</span><br><span class="line">&#x2F;&#x2F;4.递归</span><br><span class="line">    var obj &#x3D; &#123;</span><br><span class="line">        name: &#39;abc&#39;,</span><br><span class="line">        age: 23,</span><br><span class="line">        card: [&#39;visa&#39;, &#39;master&#39;],</span><br><span class="line">        wife: &#123;</span><br><span class="line">            name: &#39;bcd&#39;,</span><br><span class="line">            son: &#123;</span><br><span class="line">                name: &#39;aaa&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    var obj1 &#x3D; &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    function deepClone(Origin, target) &#123;</span><br><span class="line">        var target &#x3D; target || &#123;&#125;,  &#x2F;&#x2F;容错 如果有就有 没有就新建一个</span><br><span class="line">            toStr &#x3D; Object.prototype.toString,</span><br><span class="line">            arrStr &#x3D; &quot;[object Array]&quot;;      &#x2F;&#x2F;两者比对判断是否数组</span><br><span class="line">        for (var prop in origin) &#123;</span><br><span class="line">            &#x2F;&#x2F;加上hasOwnProperty方法判断prop是否为本身属性 不拿原型链上的值</span><br><span class="line">            if (obj.hasOwnProperty(prop)) &#123;</span><br><span class="line">                if (typeof (origin[prop]) &#x3D;&#x3D; &#39;object&#39; &amp;&amp; origin[prop]!&#x3D;&#x3D; &#39;null&#39;) &#123;</span><br><span class="line">                    &#x2F;&#x2F;判断引用值是否为数组 建立新数组或对象</span><br><span class="line">                    if (toStr.call(origin[prop]) &#x3D;&#x3D; arrStr) &#123;</span><br><span class="line">                        target[prop] &#x3D; [];</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        target[prop] &#x3D; &#123;&#125;;</span><br><span class="line">                    &#125;</span><br><span class="line">                    deepClone(origin[prop], target[prop]);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    target[prop] &#x3D; origin[prop];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return target;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>封装 type方法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;封装一个typeof函数</span><br><span class="line">        &#x2F;&#x2F;1. 分两类 原始值 引用值</span><br><span class="line">        &#x2F;&#x2F;2. 区分引用值</span><br><span class="line"></span><br><span class="line">        function type(target) &#123;</span><br><span class="line">            var ret &#x3D; typeof(target);</span><br><span class="line">            var template &#x3D; &#123;</span><br><span class="line">                &quot;[object Array]&quot;: &#39;array&#39;,</span><br><span class="line">                &quot;[object Object]&quot;: &#39;object&#39;,</span><br><span class="line">                &quot;[object Number]&quot;: &#39;number - object&#39;,</span><br><span class="line">                &quot;[object Boolean]&quot;: &#39;boolean - object&#39;,</span><br><span class="line">                &quot;[object String]&quot;: &#39;string - object&#39;,</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (target &#x3D;&#x3D; null) &#123;</span><br><span class="line">                return &#39;null&#39;;</span><br><span class="line">            &#125; else if (ret &#x3D;&#x3D; &#39;object&#39;) &#123;</span><br><span class="line">                var str &#x3D; Object.prototype.toString.call(target);</span><br><span class="line">                return template[str];</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return ret;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h3></li></ul><p>条件判断 ? 是 : 否 并且会返回值</p><p>var num = 1 &gt; 0 ? 2 + 2 : 1 + 1; //1大于0吗 是 返回2 + 2 不是 返回 1 + 1</p><p>var num = 1 &gt; 0 ? (“10” &gt; “9” ? 1 : 0) : 2;<br>字符串比对 比对ascii码 10 小于 9 返回0</p><ul><li>上面深度克隆里可以用三目运算符稍微简化一些if</li></ul><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数组-1"><a href="#数组-1" class="headerlink" title="数组"></a>数组</h3><p>在js中就是一种特殊的对象</p><p>两种方式定义数组</p><p>var arr = [];<br>var arr = new Array();</p><ul><li>数组常用的几个方法，</li><li>改变原数组<br>push,pop,shift,unshift,sort,reverse,splice</li></ul><p>arr.splice(从第几位开始，截取多少的长度，在切口处添加新的数据)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr &#x3D; [1,2,3,5];</span><br><span class="line">arr.splice(3,0,4);</span><br><span class="line">&#x2F;&#x2F;arr&#x3D;[1,2,3,4,5p]</span><br></pre></td></tr></table></figure><p>按照ascii码排序<br>sort 给数组排序 升序<br>arr.sort().reverse() 变降序了</p><p>系统提供重写sort方法 内部原理 冒泡排序</p><ol><li>必须要有两个形参</li><li>看返回值  <pre><code>1. 当返回值为负数时，那么前面的数放在前面2. 为整数，那么后面的数在前3. 为0 不动</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var arr &#x3D; [20,2,10,23,4,34,5,6];</span><br><span class="line"></span><br><span class="line">    arr.sort(function (a,b))&#123;</span><br><span class="line"></span><br><span class="line">        &lt;!-- if(a &gt; b)&#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return -1;</span><br><span class="line">        &#125; --&gt;</span><br><span class="line"></span><br><span class="line">        return a - b;  &#x2F;&#x2F;升序</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;给一个有序的数组，乱序</span><br><span class="line">var arr &#x3D; [1,2,3,4,5,6];</span><br><span class="line">arr.sort(function()&#123;</span><br><span class="line">    return Math.random() - 0.5;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><ul><li>不改变原数组<br>concat,join–&gt;split,toString,slice</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;数组去重</span><br><span class="line">        &#x2F;&#x2F;要求在原型链上编程</span><br><span class="line">        &#x2F;* </span><br><span class="line">            该方法利用对象的特性来去重，对象中属性名不可能会相同，</span><br><span class="line">            将数组中每一位取出来，放到对象中当属性名，最开始相同的数组值放对象里</span><br><span class="line">            给它一个属性值，下面相同的数组值时就无法进入对象，再把对象的属性名push</span><br><span class="line">            到一个空的数组中，返回数组</span><br><span class="line">            </span><br><span class="line">         *&#x2F;</span><br><span class="line">        var arr &#x3D; [1,1,2,2,&#39;a&#39;,&#39;a&#39;,&#39;b&#39;,&#39;b&#39;];</span><br><span class="line"></span><br><span class="line">        Array.prototype.unique &#x3D; function () &#123;</span><br><span class="line">            var temp &#x3D; &#123;&#125;;</span><br><span class="line">            var arr &#x3D; [],</span><br><span class="line">                len &#x3D; this.length;</span><br><span class="line">            for(i &#x3D; 0;i &lt; len; i ++)&#123;</span><br><span class="line">                if(!temp[this[i]])&#123;     &#x2F;&#x2F;原来没有值的时候就是undefined，!undefined就是true</span><br><span class="line">                    temp[this[i]] &#x3D; &#39;6&#39;;</span><br><span class="line">                    arr.push(this[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return arr;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="类数组"><a href="#类数组" class="headerlink" title="类数组"></a>类数组</h3><ol><li>可以利用属性名模拟数组的特性</li><li>可以动态的增长length属性</li><li>如果强行让类数组调用push方法，则会根据length属性值的位置进行属性的扩充<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">function test()&#123;</span><br><span class="line"></span><br><span class="line">        console.log(arguments);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    test(1,2,3,4,5);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;输出 [1,2,3,4,5] 但不是数组 类数组</span><br><span class="line">    &#x2F;&#x2F;类数组 对象</span><br><span class="line">    var obj &#x3D; &#123;</span><br><span class="line">        &quot;0&quot; : &#39;a&#39;,</span><br><span class="line">        &quot;1&quot; : &#39;b&#39;,</span><br><span class="line">        &quot;2&quot; : &#39;c&#39;,</span><br><span class="line">        &quot;length&quot; : 3,</span><br><span class="line">        &quot;push&quot; : Array.prototype.push,</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;属性要为索引(数字)属性，必须有length属性，最好加上push</span><br><span class="line">    &#x2F;&#x2F;length决定在哪一位上push</span><br><span class="line">    &#x2F;&#x2F; Array.prototype.push &#x3D; function (target)&#123;</span><br><span class="line">    &#x2F;&#x2F;     obj[obj.length] &#x3D; target;</span><br><span class="line">    &#x2F;&#x2F;     obj.length ++;</span><br><span class="line">    &#x2F;&#x2F; &#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="try-catch"><a href="#try-catch" class="headerlink" title="try catch"></a>try catch</h2><p>在try里面发生错误，不会执行错误后的try里的代码，try外的继续，</p><p>try{}catch(e) {}finally{}<br>Error.name的六种值对应的信息：</p><ol><li>EvalError：eval()的使用与定义不一致 </li><li>RangeError：数值越界 </li><li>ReferenceError：非法或不能识别的引用数值 </li><li>SyntaxError：发生语法解析错误 </li><li>TypeError：操作数类型错误 </li><li>URIError：URI处理函数使用不当</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h2&gt;
    
    </summary>
    
    
    
      <category term="之前学习的时候写的，现在传上来" scheme="http://yoursite.com/tags/%E4%B9%8B%E5%89%8D%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%97%B6%E5%80%99%E5%86%99%E7%9A%84%EF%BC%8C%E7%8E%B0%E5%9C%A8%E4%BC%A0%E4%B8%8A%E6%9D%A5/"/>
    
  </entry>
  
</feed>
